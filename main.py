#!/usr/bin/env python3
"""
AutoHairTweets - Sa√ß Stili Otomatik Tweet Botu
Ana √ßalƒ±≈ütƒ±rma dosyasƒ±
"""

import sys
import os
from datetime import datetime

# Proje k√∂k dizinini Python path'ine ekle
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.bot.hair_bot import hair_bot
from src.bot.weekly_scheduler import weekly_scheduler
from src.content_creator.weekly_planner import weekly_planner
from src.config.settings import settings

def main():
    """Ana fonksiyon"""
    print(f"ü§ñ {settings.BOT_NAME} ba≈ülatƒ±lƒ±yor...")
    print(f"üìÖ Tarih: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üë§ Kullanƒ±cƒ±: @{settings.TWITTER_USERNAME}")
    print("-" * 50)
    
    # Bug√ºn√ºn temasƒ±nƒ± g√∂ster
    today_theme = weekly_planner.get_today_theme()
    print(f"üé® Bug√ºn√ºn Temasƒ±: {today_theme['name']} {today_theme['emoji']}")
    print(f"üìã Konsept: {today_theme['concept']}")
    print("-" * 50)
    
    # Bot testi yap
    print("üîç Bot testi yapƒ±lƒ±yor...")
    if hair_bot.test_bot():
        print("‚úÖ Bot testi ba≈üarƒ±lƒ±!")
        
        # Bot durumunu g√∂ster
        status = hair_bot.get_bot_status()
        print(f"üìä Bot Durumu: {status['status']}")
        
        if status.get('user_info'):
            user = status['user_info']
            print(f"üë• Takip√ßi: {user.get('followers_count', 0)}")
            print(f"üìù Tweet: {user.get('tweet_count', 0)}")
        
        print("\nüöÄ Bot hazƒ±r! Komutlar:")
        print("1. AI tweet test: python main.py --ai-tweet")
        print("2. Ger√ßek tweet g√∂nder: python main.py --send-tweet")
        print("3. Haftalƒ±k program: python main.py --schedule")
        print("4. Yardƒ±m: python main.py --help")
        
    else:
        print("‚ùå Bot testi ba≈üarƒ±sƒ±z!")
        print("üîß API anahtarlarƒ±nƒ± kontrol edin.")

def test_ai_tweet():
    """AI ile tweet i√ßeriƒüi test et"""
    print("ü§ñ AI ile tweet i√ßeriƒüi √ºretiliyor...")
    
    # Bug√ºn√ºn temasƒ±nƒ± g√∂ster
    today_theme = weekly_planner.get_today_theme()
    print(f"üé® Tema: {today_theme['name']} {today_theme['emoji']}")
    
    # AI ile i√ßerik √ºret
    content = hair_bot.generate_hair_content(use_ai=True)
    print(f"üìù √úretilen ƒ∞√ßerik: {content['text']}")
    print(f"üéØ Stil: {content['style']}")
    print(f"ü§ñ √úretici: {content['generated_by']}")

def send_real_tweet():
    """Ger√ßek tweet g√∂nder"""
    print("üì§ Ger√ßek tweet g√∂nderiliyor...")
    
    # Twitter kimlik doƒürulama
    if not hair_bot.authenticate_twitter():
        print("‚ùå Twitter kimlik doƒürulama ba≈üarƒ±sƒ±z!")
        return
    
    # AI ile tweet g√∂nder
    success = hair_bot.post_hair_tweet(use_ai=True)
    
    if success:
        print("‚úÖ Tweet ba≈üarƒ±yla g√∂nderildi!")
    else:
        print("‚ùå Tweet g√∂nderilemedi!")

def show_weekly_schedule():
    """Haftalƒ±k programƒ± g√∂ster"""
    print("üìÖ Bu Haftanƒ±n Sa√ß Stili Programƒ±:")
    print("=" * 50)
    
    schedule = weekly_planner.get_week_schedule()
    
    for day, info in schedule.items():
        theme = info['theme']
        date = info['date']
        
        print(f"üìÖ {day} ({date})")
        print(f"   üé® {theme['name']} {theme['emoji']}")
        print(f"   üìã {theme['concept']}")
        print()

def show_help():
    """Yardƒ±m men√ºs√º"""
    print("ü§ñ AutoHairTweets - Geli≈ümi≈ü Sa√ß Stili Botu")
    print("=" * 50)
    print("üìã Komutlar:")
    print("  python main.py --ai-tweet    - AI ile tweet test et")
    print("  python main.py --send-tweet  - Ger√ßek tweet g√∂nder")
    print("  python main.py --schedule    - Haftalƒ±k program")
    print("  python main.py --help        - Yardƒ±m")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "--ai-tweet":
            test_ai_tweet()
        elif command == "--send-tweet":
            send_real_tweet()
        elif command == "--schedule":
            show_weekly_schedule()
        elif command == "--help":
            show_help()
        else:
            print(f"‚ùå Bilinmeyen komut: {command}")
            show_help()
    else:
        main()